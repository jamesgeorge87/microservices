service.name= auth-service

eureka.instance.preferIpAddress= true
eureka.client.registerWithEureka= true
eureka.client.fetchRegistry= true
eureka.client.serviceUrl.defaultZone= http://localhost:8070/eureka

spring.datasource.url=jdbc:h2:mem:authdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

gateway.server.hostname=localhost
gateway.server.portnumber=8072

#spring.jpa.hibernate.ddl-auto=none
#spring.jpa.database=POSTGRESQL
#spring.datasource.platform=postgres
#spring.jpa.show-sql = true
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#spring.database.driverClassName= org.postgresql.Driver
#spring.datasource.username= user
#spring.datasource.password= password
#spring.datasource.url= jdbc:postgresql://localhost:5432/postgres
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

spring.kafka.consumer.bootstrap-servers= localhost:9092
spring.kafka.consumer.group-id= 1
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer= org.apache.kafka.common.serialization.StringDeserializer

spring.kafka.producer.bootstrap-servers= localhost:9092
spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer= org.apache.kafka.common.serialization.StringSerializer

        
zipkin.baseUrl: http://localhost:9411

management.endpoints.web.exposure.include= health, metrics, prometheus
management.metrics.tags.application=${spring.application.name}
